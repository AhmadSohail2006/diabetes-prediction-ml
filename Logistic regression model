# to predict

import pandas as pd

file_path = '/content/drive/MyDrive/ML related datasets/diabetes.csv'
df = pd.read_csv(file_path)
print(df.head())
print('\n',df.shape)
print('\n',df.info())

# checking if null values
print(df.isnull().sum())

# if null exist handling it using mode() method
for col in df.select_dtypes(include=['object']):
    df[col].fillna(df[col].mode()[0], inplace=True)

# dropping outcome column from dataframe and storing it as y
X = df.drop(columns=['Outcome'])
y = df['Outcome']

# applyiung z_score scalling(standard scaling technique)
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X = scaler.fit_transform(X)

# splitting data into training and testing
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,
                                                    test_size=0.2,
                                                    random_state=42)


# training model
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train, y_train)

# Model Evaluation (lets check our model how it performs)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
y_pred = model.predict(X_test)

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy : .2f}")

# classification report
print("\n classification report")
print(classification_report(y_test, y_pred))

# confusion matrix
print("\n confusion matrix")
print(confusion_matrix(y_test, y_pred))

# visualizing its heatmap
import seaborn as sns
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d')

# Feature Importance Visualization (Add after model training)
import matplotlib.pyplot as plt
plt.figure(figsize=(10,5))
pd.Series(model.coef_[0], index=df.columns[:-1]).sort_values().plot(kind='barh')
plt.title("Feature Impact on Diabetes Prediction")
plt.xlabel("Coefficient Value")
plt.show()
